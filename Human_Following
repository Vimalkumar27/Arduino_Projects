
#define ENA 11
#define IN1 10
#define IN2 9
#define IN3 8
#define IN4 7
#define ENB 6

#define TRIG_FRONT 3
#define ECHO_FRONT 2
#define TRIG_LEFT 5
#define ECHO_LEFT A0
#define TRIG_RIGHT 4
#define ECHO_RIGHT 12

#define DIST_THRESHOLD 30     // Human detection range 
#define MAX_VALID_DIST 300    // Max reliable sensor range
#define MOTOR_SPEED 200

void setup() {
  //Motor
  pinMode(ENA, OUTPUT); pinMode(IN1, OUTPUT); pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT); pinMode(IN4, OUTPUT); pinMode(ENB, OUTPUT);

  // Ultrasonic
  pinMode(TRIG_FRONT, OUTPUT); pinMode(ECHO_FRONT, INPUT);
  pinMode(TRIG_LEFT, OUTPUT); pinMode(ECHO_LEFT, INPUT);
  pinMode(TRIG_RIGHT, OUTPUT); pinMode(ECHO_RIGHT, INPUT);

  Serial.begin(9600);
}


long getDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW); delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH, 30000);  
  if (duration == 0) return 999;  // No echo
  return duration * 0.034 / 2;    // Convert to cm
}


void moveForward() {
  digitalWrite(IN1, HIGH); digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH); digitalWrite(IN4, LOW);
  analogWrite(ENA, MOTOR_SPEED); analogWrite(ENB, MOTOR_SPEED);
}

void turnLeft() {

  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, 0);

  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, MOTOR_SPEED);
}

void turnRight() {

  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  analogWrite(ENA, MOTOR_SPEED);

  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENB, 0);
}

void stopMotors() {
  digitalWrite(IN1, LOW); digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW); digitalWrite(IN4, LOW);
  analogWrite(ENA, 0); analogWrite(ENB, 0);
}

void loop() {
  long frontDist = getDistance(TRIG_FRONT, ECHO_FRONT);
  long leftDist  = getDistance(TRIG_LEFT, ECHO_LEFT);
  long rightDist = getDistance(TRIG_RIGHT, ECHO_RIGHT);

  Serial.print("Front: "); Serial.print(frontDist);
  Serial.print(" | Left: "); Serial.print(leftDist);
  Serial.print(" | Right: "); Serial.println(rightDist);

  
  bool frontValid = frontDist > 0 && frontDist < MAX_VALID_DIST;
  bool leftValid  = leftDist > 0  && leftDist  < MAX_VALID_DIST;
  bool rightValid = rightDist > 0 && rightDist < MAX_VALID_DIST;

  
  if (frontValid && frontDist < DIST_THRESHOLD) {
    moveForward();
    Serial.println(">> Following Forward");
  }
  else if (rightValid && rightDist < DIST_THRESHOLD) {
    
    turnRight();
    Serial.println(">> Turning Right to Follow (from Right Sensor)");
  }
  else if (leftValid && leftDist < DIST_THRESHOLD) {

    turnLeft();
    Serial.println("<< Turning Left to Follow (from Left Sensor)");
  }
  else {
    stopMotors();
    Serial.println("-- No Human Detected: Stop");
  }

  delay(300);  
}
